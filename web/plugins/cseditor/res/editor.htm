<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <script src="js/jquery-1.11.2.min.js" type="text/javascript"></script>
    <!--<script src="js/jquery.form.js" type="text/javascript"></script>-->
    <!-- <script src="../../CSH5Upload/res/js/CSH5UploaderV2.js" type="text/javascript"></script>
    <script src="../../CSFlexUpload/res/js/CSFlexUpload.js" type="text/javascript"></script>
    <script src="../../CSFlexUpload/res/js/CSHtml5Upload.js" type="text/javascript"></script> -->
    <script src="js/CSEditor.js" type="text/javascript"></script>
    <script src="?cmd=sys_101svc_getjs&tgt=CSUICore.js" type="text/javascript"></script>
    <script src="?cmd=sys_101svc_getjs&tgt=CSUIWin.js" type="text/javascript"></script>
    <script src="?cmd=sys_101svc_getjs&tgt=CSUIDataList.js" type="text/javascript"></script>
    <link href="?cmd=sys_101svc_getjs&tgt=CSUIDataList.css" rel="stylesheet" type="text/css" />
    <script src="?cmd=sys_101svc_getjs&tgt=CSUIColorSelector.js" type="text/javascript"></script>
    <script src="?cmd=sys_101svc_getjs&tgt=CSUILoadingLineBar.js" type="text/javascript"></script>
    <script src="?cmd=sys_101svc_getjs&tgt=CSUIMouseHoverPanel.js" type="text/javascript"></script>
    <link href="?cmd=sys_101svc_getjs&tgt=CSUIMouseHoverPanel.css" rel="stylesheet" type="text/css" />
    <script src="?cmd=sys_101svc_getjs&tgt=CSJSV3Core.js,CSJSV3UICore.js,CSJSV3UIFileUploadA.js" type="text/javascript"></script>
    <link href="?cmd=sys_101svc_getjs&tgt=CSJSV3UIWin.css" rel="stylesheet" type="text/css" />
    <script src="js/CSHtmlRebuilderForDisplay.js" type="text/javascript"></script>
    <script src='?cmd=sys_101svc_getjs&tgt=CSUIPageSearch.js'></script>
    <style>
    	.scroll-box {
		  width: 100%;
		  height: 100%;
		  -webkit-overflow-scrolling: touch;
		  overflow-y: scroll;
		}
    </style>
    <script>
    	var _upload1;//附件上传
    	var _upload2;//图片上传
    	var _world = new CSJSV3.UI.World({});
    	_world.ready(function (world) {
        	_upload1 = new CSJSV3.UI.FileUploadA({
        		multiSelect: true,
        		onChange: function(self) {
    				self.world().setLoading('上传中，请稍后');
        			self.upload(function(r) {
        				self.world().setLoading(false);
        				if(r.success == false) {
        					self.world().showErrorMsg(r.msg);
        				}
        				else {
        					if (cscom.isOldIE()) {
	                            csEditor1Js.restoreSelectionRange();
	                        }
        					for(var i=0;i<r.data.length;i++) {
            					csEditor1Js.insertLink(r.data[i].name, r.data[i].name, self.world().rootUrl() + 'api/downloada?name=' + encodeURI(r.data[i].name) + '&path=' + encodeURI(r.data[i].path));
        					}
        					window.onEditorContentChanged();
        				}
        			});
        		}
        	});
        	_upload1.init(_world);
        	_upload1.render();
        	$('.hiddenArea').append(_upload1.getUICore());

        	_upload2 = new CSJSV3.UI.FileUploadA({
        		multiSelect: true,
        		accept: '.jpg,.jpeg,.png,.gif,.bmp,.jfif,.tif,.ico',
        		onChange: function(self) {
    				self.world().setLoading('上传中，请稍后');
        			self.upload(function(r) {
        				self.world().setLoading(false);
        				if(r.success == false) {
        					self.world().showErrorMsg(r.msg);
        				}
        				else {
        					if (cscom.isOldIE()) {
	                            csEditor1Js.restoreSelectionRange();
	                        }

        					var toInsertImgs = [];
        					for(var i=0;i<r.data.length;i++) {
                                toInsertImgs.push({ title: r.data[i].name, alt: r.data[i].name, src: self.world().rootUrl() + 'warehouse/upload/' + r.data[i].path });
        					}

                            csEditor1Js.insertImgs(toInsertImgs);
        					window.onEditorContentChanged();
        				}
        			});
        		}
        	});
        	_upload2.init(_world);
        	_upload2.render();
        	$('.hiddenArea').append(_upload2.getUICore());
        });
    	
        var recfgActName = cscom.queryString('recfgAct');
        if (recfgActName == '' && cscom.queryString('tgtId') != '') {
            recfgActName = 'document.getElementById("' + cscom.queryString('tgtId') + '").csea.getRecfgData';
        }

        if (recfgActName != null && recfgActName != '') {
            var act = eval('parent.' + recfgActName);
            var cfg = act();

            for (var i in cfg) {
                eval('if(cfg.' + i + '!=null){window.csEditorCfg.' + i + '=cfg.' + i + ';}');
            }
        }

        var hasFindDraftsItem = false;
        if (window.csEditorCfg.menuBarItems.length == 0) {
            hasFindDraftsItem = true;
            for (var i = 0; i < window.csEditorCfg.menuBarInitItems.length; i++) {
                window.csEditorCfg.menuBarItems.push(window.csEditorCfg.menuBarInitItems[i]);
            }
        }
        else {
            for (var r = 0; r < window.csEditorCfg.menuBarItems.length; r++) {
                if (window.csEditorCfg.menuBarItems[r].key == 'Drafts') {
                    hasFindDraftsItem = true;
                }
                if (window.csEditorCfg.menuBarItems[r].title == null || window.csEditorCfg.menuBarItems[r].title == '') {
                    for (var i = 0; i < window.csEditorCfg.menuBarInitItems.length; i++) {
                        if (window.csEditorCfg.menuBarItems[r].key == window.csEditorCfg.menuBarInitItems[i].key) {
                            window.csEditorCfg.menuBarItems[r].title = window.csEditorCfg.menuBarInitItems[i].title;
                            break;
                        }
                    }
                }
            }
        }
        if (hasFindDraftsItem == false) {
            for (var i = 0; i < window.csEditorCfg.menuBarInitItems.length; i++) {
                if (window.csEditorCfg.menuBarInitItems[i].key == 'Drafts') {
                    window.csEditorCfg.menuBarItems.push(window.csEditorCfg.menuBarInitItems[i]);
                }
            }
        }
    </script>
    <script>
        function canBeVideo(e, attachedObj) {
            if (e.target.tagName.toUpperCase() == 'a'.toUpperCase()) {
                return true;
            }
            return false;
        }

        function canEditVideo(e, attachedObj) {
            if (e.target.tagName.toUpperCase() == 'video'.toUpperCase()) {
                return true;
            }
            return false;
        }

        function canEditImg(e, attachedObj) {
            if (e.target.tagName.toUpperCase() == 'img'.toUpperCase()) {
                return true;
            }
            return false;
        }

        function canInsert(e, attachedObj) {
            var notSupportTagNames = ['a', 'video'];
            for (var i = 0; i < notSupportTagNames.length; i++) {
                if (e.target.tagName.toUpperCase() == notSupportTagNames[i].toUpperCase()) {
                    return false;
                }
            }
            return true;
        }

        function editVideo(video, callback) {
            var win = csui.showWin({ title: '编辑视频', url: 'EditVideoView.htm' });
            $(win.getUICore().find('iframe')).load(function () {
                this.contentWindow.toLoadAction(video);
                this.contentWindow.onSaveAction = function (video) {
                    if (callback != null) {
                        callback(video);
                    }
                    csui.closeWin();
                };
                this.contentWindow.onCancelAction = function () {
                    csui.closeWin();
                };
            });
        }

        function editImg(img, callback) {
            var win = csui.showWin({ title: '编辑图片', url: 'EditImgView.htm', width: 530, height: 200 });
            $(win.getUICore().find('iframe')).load(function () {
                this.contentWindow.toLoadAction(img);
                this.contentWindow.onSaveAction = function (img) {
                    if (callback != null) {
                        callback(img);
                    }
                    csui.closeWin();
                };
                this.contentWindow.onCancelAction = function () {
                    csui.closeWin();
                };
            });
        }

        function getRightMenus(self) {
            var rightMenuItems = [];
            rightMenuItems.push({
                text: "转为视频播放器", href: "javascript:;",
                onclick: function (e, attachedObj) {
                    if (self.parent.editVideo == null) { alert("未找到此函数的定义"); } else {
                        var touchTgt = $(e.target).parent()[0].datacontext.ui_touch_tgt;
                        var a = touchTgt;
                        var url = '';
                        if ($(a).attr('data-url') != null && $(a).attr('data-url') != '') {
                            url = $(a).attr('data-url');
                        }
                        else if (a.href != null && a.href != '' && a.href.indexOf('javascript:') == -1) {
                            url = a.href;
                        }
                        else {
                            csui.alert('未能获取视频地址');
                            return;
                        }

                        var action1 = function () {
                            var video = $('<video src="" controls="controls" style="border:1px solid silver;width:400px;height:200px;">您的浏览器不支持HTML5</video>');
                            video.attr('src', url);
                            self.parent.editVideo(video, function (video) {
                                video.attr('preload', true);
                                video.insertBefore($(a));
                                $(a).remove();
                            });
                        };

                        var topObj = csui.getWebTopObj();
                        if (topObj.CSSuperShell != null && topObj.CSSuperShell.Version != null && topObj.CSSuperShell.Version != '') {
                            if (url.toLowerCase().indexOf('.ogg') == -1 && url.toLowerCase().indexOf('.webm') == -1) {
                                csui.alert('注意：此格式无法在客户端内播放（支持的格式：.ogg, .webm）', function () {
                                    action1();
                                });
                            }
                            else {
                                action1();
                            }
                        }
                        else {
                            action1();
                        }
                    }
                    onEditorContentChanged();
                },
                canShow: function (e, attachedObj) {
                    return canBeVideo(e, attachedObj);
                }
            });
            rightMenuItems.push({
                text: "编辑视频播放器", href: "javascript:;",
                onclick: function (e, attachedObj) {
                    if (self.parent.editVideo == null) { alert("未找到此函数的定义"); } else {
                        var touchTgt = $(e.target).parent()[0].datacontext.ui_touch_tgt;
                        var tgt = touchTgt;
                        self.parent.editVideo(tgt, function (video) {
                        });
                    }
                    onEditorContentChanged();
                },
                canShow: function (e, attachedObj) {
                    return canEditVideo(e, attachedObj);
                }
            });
            rightMenuItems.push({
                text: "编辑图片", href: "javascript:;",
                onclick: function (e, attachedObj) {
                    if (self.parent.editImg == null) { alert("未找到此函数的定义"); } else {
                        var touchTgt = $(e.target).parent()[0].datacontext.ui_touch_tgt;
                        var tgt = touchTgt;
                        self.parent.editImg(tgt, function () {
                            onEditorContentChanged();
                        });
                    }
                    onEditorContentChanged();
                },
                canShow: function (e, attachedObj) {
                    return canEditImg(e, attachedObj);
                }
            });
            /*
            rightMenuItems.push({
                text: "插入图片", href: "javascript:;",
                onclick: function (e, attachedObj) {
                    if (self.parent.pasteImg == null) { alert("未找到此函数的定义"); } else { self.parent.pasteImg(); }
                    onEditorContentChanged();
                },
                canShow: function (e, attachedObj) {
                    if (canInsert(e, attachedObj)) {
                        return true;
                    }
                    return false;
                }
            });
            rightMenuItems.push({
                text: "插入附件", href: "javascript:;",
                onclick: function (e, attachedObj) {
                    if (self.parent.pasteFile == null) { alert("未找到此函数的定义"); } else { self.parent.pasteFile(); }
                    onEditorContentChanged();
                },
                canShow: function (e, attachedObj) {
                    if (canInsert(e, attachedObj)) {
                        return true;
                    }
                    return false;
                }
            });
            rightMenuItems.push({
                text: "粘帖富文本", href: "javascript:;",
                onclick: function (e, attachedObj) {
                    if (self.parent.pasteRichText == null) { alert("未找到此函数的定义"); } else { self.parent.pasteRichText(); }
                    onEditorContentChanged();
                },
                canShow: function (e, attachedObj) {
                    if (canInsert(e, attachedObj)) {
                        return true;
                    }
                    return false;
                }
            });
            rightMenuItems.push({
                text: "粘帖纯文本", href: "javascript:;",
                onclick: function (e, attachedObj) {
                    if (self.parent.pasteText == null) { alert("未找到此函数的定义"); } else { self.parent.pasteText(); }
                    onEditorContentChanged();
                },
                canShow: function (e, attachedObj) {
                    if (canInsert(e, attachedObj)) {
                        return true;
                    }
                    return false;
                }
            });*/
            return rightMenuItems;
        }
    </script>
</head>
<body onload="onPageLoad()" oncontextmenu="return false;" style="overflow:hidden;">
    <div class="editorBorder">
        <div id="menuBarTop" class="menuBar" style="vertical-align: middle; border-bottom: 1px solid silver;
            padding: 3px;">
        </div>
        <div style="">
            <iframe id="if1" frameborder="0" spellcheck="false" style="width: 100%; height: 100%;
                border: 0px; overflow-x: hidden;"></iframe>
            <script>
            	if(cscom.isIOS()) {
            		$('#if1').parent().addClass('scroll-box');
            	}
            </script>
        </div>
    </div>
    <div class="hiddenArea" style="display:none;"></div>
    <link href="css.css" rel="stylesheet" type="text/css" />
    <!--<div id="debug" style="display: none; font-size: 12px; position: absolute; left: 0px;
        bottom: 0px; overflow-y: auto; background-color: White; max-height: 100px; opacity: 0.60;
        -moz-opacity: 0.60; filter: alpha(opacity=60);">
    </div>-->
    <script>
        var delayInputOverThreadId;
        for (var i = 0; i < window.csEditorCfg.menuBarItems.length; i++) {
            var menuBtnCfg = window.csEditorCfg.menuBarItems[i];
            if (menuBtnCfg.type == 'select') {
                var item = $('<select class="cs_editor_fontSizeBtn" style="margin:1px;"></select>');
                item[0].cs_menuBtnCfg = menuBtnCfg;
                item.append('<option>字号</option>');
                for (var r = 0; r < menuBtnCfg.items.length; r++) {
                    if (menuBtnCfg.key == 'FontSize') {
                        item.append('<option style="font-size:' + menuBtnCfg.items[r] + ';">' + menuBtnCfg.items[r] + '</option>');
                    }
                    else {
                        item.append('<option>' + menuBtnCfg.items[r] + '</option>');
                    }
                }
                item.change(function () {
                    for (var r = 0; r < window.csEditorCfg.menuBarItemActs.length; r++) {
                        if (window.csEditorCfg.menuBarItemActs[r].key == menuBtnCfg.key) {
                            var act = window.csEditorCfg.menuBarItemActs[r].act;
                            act(csEditor1Js, { value: this.value }, null);
                        }
                    }
                    this.value = '字号';
                });
                $('#menuBarTop').append(item);
            }
            else if (menuBtnCfg.type == 'empty') {
                $('#menuBarTop').append('<div style="vertical-align:middle;float:left;' + menuBtnCfg.style + '">&nbsp;</div>');
            }
            else {
                var item = $('<input type="button" key="' + menuBtnCfg.key + '" class="mBtn mBtn-for-' + menuBtnCfg.key + '" />');
                item.attr('title', menuBtnCfg.title);
                var topObj = csui.getWebTopObj();
                if (topObj.CSSuperShell != null && topObj.CSSuperShell.Version != null && topObj.CSSuperShell.Version != '') {
                    new CSUIMouseHoverPanel({ trigger: item, html: menuBtnCfg.title, whenOverflowShow: false, style: 'z-index:3;' }).buildUI();
                }

                item.click(function (e) {
                    e.stopPropagation();
                    csEditor1Js.doCmd($(this).attr('key'), false, null);
                });
                $('#menuBarTop').append(item);
            }
        }
        $('#menuBarTop').append('<span style="vertical-align:middle;width:0px;">&nbsp;</span>');
        $('#menuBarTop').append('<div style="clear:both;"></div>');

        function getEditorSelection() {
            //ie
            var range = document.selection.createRange()
            //在Firefox,Chrome中则使用
            var range = window.getSelection().getRangeAt(0);
        }

        function getEditorHTML() {
            return csEditor1Js.getHtml();
        }

        function setEditorHTML(html) {
            if (window.csEditorCfg.hasEditorBodyLoad) {
                csEditor1Js.setHtml(html);
            }
            else {
                try { console.log('body还未加载完毕，重试中...'); } catch (exc) { }
                setTimeout(function () {
                    setEditorHTML(html);
                }, 300);
            }
        }
        
        function enableEdit(v) {
        	csEditor1Js.enableEdit(v);
        }

        function insertHTMLToEditor(html) {
            try {
                csEditor1Js.insertHtml(html);
            } catch (exc) {
                alert(exc.message);
            }
        }

        function pasteImg(noAlert) {
            csEditor1Js.focus();
            try {
                var topObj = csui.getWebTopObj();
                var r = topObj.window.external.GetImgFromClipboardToDataURI();
                var imgSrc = '';

                if (r == null) {
                    alert('返回结果为空');
                }
                else if (r.success == false) {
                    if (noAlert != true) {
                        alert(r.msg);
                    }
                }
                else {
                    imgSrc = r.data;
                    insertHTMLToEditor('<img src="' + imgSrc + '" style="max-width:96%;" />');
                    insertHTMLToEditor('<div><br/></div>');
                }
                return r;
            } catch (exc) {
                alert(exc.message);
            }
        }

        function pasteFile(noAlert) {
            try {
                var topObj = csui.getWebTopObj();
                var r = topObj.window.external.PasteFilesFromClipboard();
                if (r != null && r.success == false) {
                    if (noAlert != true) {
                        alert(r.msg);
                    }
                }
                return r;
            } catch (exc) {
                alert(exc.message);
            }
        }
        //粘帖富文本（文本可能包含图片或链接，会自动转为DataUrl格式）
        function pasteRichText(noAlert) {
            try {
                var topObj = csui.getWebTopObj();
                var r = topObj.window.external.PasteRichText();
                if (r != null && r.success == false) {
                    if (noAlert != true) {
                        alert(r.msg);
                    }
                }
                else {
                    if (r == null || r.data == null || r.data == '') {
                        if (noAlert != true) {
                            alert('不可粘帖空内容');
                        }
                    }
                    else {
                        var html = r.data;
                        if (html != null) {
                            html = html.replace('<div><!--StartFragment-->', '<div style="display:inline;">').replace(/<!--EndFragment-->\s*<\/div>$/, '</div>');
                        }
                        insertHTMLToEditor(html);
                        insertHTMLToEditor('<div><br/></div>');
                    }
                }
                return r;
            } catch (exc) {
                alert(exc.message);
            }
        }
        //粘帖文本
        function pasteText(noAlert) {
            try {
                var topObj = csui.getWebTopObj();
                var r = topObj.window.external.PasteText();
                if (r != null && r.success == false) {
                    if (noAlert != true) {
                        alert(r.msg);
                    }
                }
                else {
                    if (r == null || r.data == null || r.data == '') {
                        if (noAlert != true) {
                            alert('不可粘帖空内容');
                        }
                    }
                    else {
                        insertHTMLToEditor('<span>' + r.data + '</span>');
                    }
                }
                return r;
            } catch (exc) {
                alert(exc.message);
            }
        }
        //粘帖（自动判断）
        function pasteAuto() {
            var r = null;
            //r = pasteText(true);
            //if (r.success == false) {
            r = pasteImg(true);
            if (r.success == false) {
                r = pasteRichText(true);
                if (r.success == false) {
                    r = pasteFile(true);
                    if (r.success == false) {
                        //alert('未发现可粘帖的内容');
                    }
                }
            }
            //}
            return r;
        }

        function createLoadingLineBar(renderTo) {
            var t = new CSUILoadingLineBar({
                renderTo: renderTo
            });
            t.init();

            return t;
        }

        function onEditorContentChanged() {
            if (window.csEditorCfg.onContentChangedAction != null) {
                window.csEditorCfg.onContentChangedAction();
            }
        }

        var isEditorReady = false;
        function onEditorContentLoaded(editAreaDoc) {
            $(editAreaDoc).keydown(function (e) {
                if (e.ctrlKey && e.which == 86) {//重构ctrl + v快捷键功能
                    var topObj = csui.getWebTopObj();
                    if (topObj.isOpenByCSSuperShell != null && topObj.isOpenByCSSuperShell()) {
                        if (topObj.CSSuperShell != null) {
                            topObj.CSSuperShell.insertHTMLToEditor = function (html) {
                                insertHTMLToEditor(html);
                            };
                        }
                        //粘帖（自动判断）
                        var r = pasteAuto();
                        if (r.success == true) {
                            e.preventDefault(); //方法阻止元素发生默认的行为（例如，当点击提交按钮时阻止对表单的提交）
                            e.stopPropagation(); //阻止 click 事件冒泡到父元素
                        }
                    }
                    //保存到草稿
                    clearTimeout(delayInputOverThreadId);
                    delayInputOverThreadId = setTimeout(function () {
                        csEditor1Js.saveToDrafts();
                    }, 3000);
                }
                else if (e.ctrlKey && e.which == 67) {//ctrl + c
                }
                else if (e.ctrlKey && e.which == 83) {//ctrl + s
                    e.preventDefault(); //方法阻止元素发生默认的行为（例如，当点击提交按钮时阻止对表单的提交）
                    e.stopPropagation(); //阻止 click 事件冒泡到父元素
                    if (window.csEditorCfg.onCtrlS != null) {
                        window.csEditorCfg.onCtrlS();
                    }
                }

                if (e.ctrlKey == false && e.altKey == false) {
                    //保存到草稿
                    clearTimeout(delayInputOverThreadId);
                    delayInputOverThreadId = setTimeout(function () {
                        csEditor1Js.saveToDrafts();
                    }, 3000);
                }

                onEditorContentChanged();
            });
            
            if (window.csEditorCfg.onLoadedAction != null) {
                var csea;
                try { csea = eval('parent.' + 'document.getElementById("' + cscom.queryString('tgtId') + '").csea'); } catch (exc) { }
                window.csEditorCfg.onLoadedAction(csea, parent, editAreaDoc);
            }
            /*内容搜索器*/
            new CSUIPageSearch({
                contentArea: $(csEditor1Js.getDocument().body),
                scrollArea: $(csEditor1Js.getDocument().body),
                styleArea: $(csEditor1Js.getDocument().body),
                onReSetHtml: function () {
                    new CSHtmlRebuilderForDisplay({ tgtArea: $(csEditor1Js.getDocument().body), maxWidthAreaTagName: 'body' }).run();
                }
            }).build();
            isEditorReady = true;
        }

        $(document).ready(function () {
            window.loadingLineBar = createLoadingLineBar('.editorBorder');
            csEditor1Js.init();

            $(document.body).keydown(function (e) {
                if (e.ctrlKey && e.which == 83) {//ctrl + s
                    e.preventDefault(); //方法阻止元素发生默认的行为（例如，当点击提交按钮时阻止对表单的提交）
                    e.stopPropagation(); //阻止 click 事件冒泡到父元素
                    if (window.csEditorCfg.onCtrlS != null) {
                        window.csEditorCfg.onCtrlS();
                    }
                }
            });
        });
    </script>
    <!--自定义接口-->
    <script type="text/javascript">
        var csEdAgent = null;

        function onPageLoad() {
            csEdAgent = {
                getContentToHtml: function () {
                    var str = getEditorHTML();
                    return str;
                },
                setContentByHtml: function (html) {
                    setEditorHTML(html);
                }
            };
        }
    </script>
</body>
</html>
